#!/usr/bin/env ruby
require 'thor'
require 'iron_worker_ng'
require 'dotenv'
Dotenv.load

class S3TwinCLI < Thor
  include Thor::Actions

  desc 'upload .WORKER NAME', 'Upload our worker'
  def upload(worker='s3twin.worker',name='S3Twin')
    client = IronWorkerNG::Client.new(:token => ENV['IRON_TOKEN'], :project_id => ENV['IRON_PROJECT_ID'])
    code = IronWorkerNG::Code::Base.new(:workerfile => worker, :name => name)
    client.codes.create(code)
  end

  desc 'queue WORKER', 'Queue a worker'
  def queue(name='S3Twin',payload=nil)
    payload ||= default_payload
    client = IronWorkerNG::Client.new(:token => ENV['IRON_TOKEN'], :project_id => ENV['IRON_PROJECT_ID'])
    client.tasks.create(name,payload)
    puts "#{name} queued!"
  end

  desc 'schedule WORKER', 'Schedule a worker'
  def schedule(name='S3Twin',payload=nil,time=nil)
    payload ||= default_payload
    time ||= default_time
    client = IronWorkerNG::Client.new(:token => ENV['IRON_TOKEN'], :project_id => ENV['IRON_PROJECT_ID'])
    schedule = client.schedules.create(name,payload,time)
    puts "#{name} scheduled! (id:#{schedule.id})"
  end

  no_commands do
    def default_payload
      payload = {
        :source_bucket => ENV['SOURCE_S3_BUCKET'],
        :source_access_key => ENV['SOURCE_AWS_ACCESS_KEY_ID'],
        :source_secret_key => ENV['SOURCE_AWS_SECRET_ACCESS_KEY'],
        :destination_bucket => ENV['DESTINATION_S3_BUCKET'],
        :destination_access_key => ENV['DESTINATION_AWS_ACCESS_KEY_ID'],
        :destination_secret_key => ENV['DESTINATION_AWS_SECRET_ACCESS_KEY']
      }
    end

    def default_time
      time = {
        :start_at => Time.now,
        :run_every => 3600
      }
    end
  end

end

S3TwinCLI.start
